--
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
-- @generated
--


require 'Thrift'
require 'interface_ttypes'
require 'struct_ttypes'


BRKServiceClient = __TObject.new(__TClient, {
  __type = 'BRKServiceClient'
})

function BRKServiceClient:brk_get_mobile_code(mobile)
  self:send_brk_get_mobile_code(mobile)
  return self:recv_brk_get_mobile_code(mobile)
end

function BRKServiceClient:send_brk_get_mobile_code(mobile)
  self.oprot:writeMessageBegin('brk_get_mobile_code', TMessageType.CALL, self._seqid)
  local args = brk_get_mobile_code_args:new{}
  args.mobile = mobile
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BRKServiceClient:recv_brk_get_mobile_code(mobile)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = brk_get_mobile_code_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function BRKServiceClient:brk_login(mobile, code)
  self:send_brk_login(mobile, code)
  return self:recv_brk_login(mobile, code)
end

function BRKServiceClient:send_brk_login(mobile, code)
  self.oprot:writeMessageBegin('brk_login', TMessageType.CALL, self._seqid)
  local args = brk_login_args:new{}
  args.mobile = mobile
  args.code = code
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BRKServiceClient:recv_brk_login(mobile, code)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = brk_login_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function BRKServiceClient:brk_recharge(mobile, amount)
  self:send_brk_recharge(mobile, amount)
  return self:recv_brk_recharge(mobile, amount)
end

function BRKServiceClient:send_brk_recharge(mobile, amount)
  self.oprot:writeMessageBegin('brk_recharge', TMessageType.CALL, self._seqid)
  local args = brk_recharge_args:new{}
  args.mobile = mobile
  args.amount = amount
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BRKServiceClient:recv_brk_recharge(mobile, amount)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = brk_recharge_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function BRKServiceClient:brk_get_account_balance(mobile)
  self:send_brk_get_account_balance(mobile)
  return self:recv_brk_get_account_balance(mobile)
end

function BRKServiceClient:send_brk_get_account_balance(mobile)
  self.oprot:writeMessageBegin('brk_get_account_balance', TMessageType.CALL, self._seqid)
  local args = brk_get_account_balance_args:new{}
  args.mobile = mobile
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BRKServiceClient:recv_brk_get_account_balance(mobile)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = brk_get_account_balance_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function BRKServiceClient:brk_list_account_records(mobile)
  self:send_brk_list_account_records(mobile)
  return self:recv_brk_list_account_records(mobile)
end

function BRKServiceClient:send_brk_list_account_records(mobile)
  self.oprot:writeMessageBegin('brk_list_account_records', TMessageType.CALL, self._seqid)
  local args = brk_list_account_records_args:new{}
  args.mobile = mobile
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BRKServiceClient:recv_brk_list_account_records(mobile)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = brk_list_account_records_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function BRKServiceClient:brk_unlock(mobile, bike_code)
  self:send_brk_unlock(mobile, bike_code)
  return self:recv_brk_unlock(mobile, bike_code)
end

function BRKServiceClient:send_brk_unlock(mobile, bike_code)
  self.oprot:writeMessageBegin('brk_unlock', TMessageType.CALL, self._seqid)
  local args = brk_unlock_args:new{}
  args.mobile = mobile
  args.bike_code = bike_code
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BRKServiceClient:recv_brk_unlock(mobile, bike_code)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = brk_unlock_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function BRKServiceClient:brk_list_travel(mobile)
  self:send_brk_list_travel(mobile)
  return self:recv_brk_list_travel(mobile)
end

function BRKServiceClient:send_brk_list_travel(mobile)
  self.oprot:writeMessageBegin('brk_list_travel', TMessageType.CALL, self._seqid)
  local args = brk_list_travel_args:new{}
  args.mobile = mobile
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BRKServiceClient:recv_brk_list_travel(mobile)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = brk_list_travel_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function BRKServiceClient:brk_lock(mobile, bike_code)
  self:send_brk_lock(mobile, bike_code)
  return self:recv_brk_lock(mobile, bike_code)
end

function BRKServiceClient:send_brk_lock(mobile, bike_code)
  self.oprot:writeMessageBegin('brk_lock', TMessageType.CALL, self._seqid)
  local args = brk_lock_args:new{}
  args.mobile = mobile
  args.bike_code = bike_code
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function BRKServiceClient:recv_brk_lock(mobile, bike_code)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = brk_lock_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end
BRKServiceIface = __TObject:new{
  __type = 'BRKServiceIface'
}


BRKServiceProcessor = __TObject.new(__TProcessor
, {
 __type = 'BRKServiceProcessor'
})

function BRKServiceProcessor:process(iprot, oprot, server_ctx)
  local name, mtype, seqid = iprot:readMessageBegin()
  local func_name = 'process_' .. name
  if not self[func_name] or ttype(self[func_name]) ~= 'function' then
    iprot:skip(TType.STRUCT)
    iprot:readMessageEnd()
    x = TApplicationException:new{
      errorCode = TApplicationException.UNKNOWN_METHOD
    }
    oprot:writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
    x:write(oprot)
    oprot:writeMessageEnd()
    oprot.trans:flush()
  else
    self[func_name](self, seqid, iprot, oprot, server_ctx)
  end
end

function BRKServiceProcessor:process_brk_get_mobile_code(seqid, iprot, oprot, server_ctx)
  local args = brk_get_mobile_code_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = brk_get_mobile_code_result:new{}
  local status, res = pcall(self.handler.brk_get_mobile_code, self.handler, args.mobile)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  else
    result.success = res
  end
  oprot:writeMessageBegin('brk_get_mobile_code', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BRKServiceProcessor:process_brk_login(seqid, iprot, oprot, server_ctx)
  local args = brk_login_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = brk_login_result:new{}
  local status, res = pcall(self.handler.brk_login, self.handler, args.mobile, args.code)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  else
    result.success = res
  end
  oprot:writeMessageBegin('brk_login', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BRKServiceProcessor:process_brk_recharge(seqid, iprot, oprot, server_ctx)
  local args = brk_recharge_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = brk_recharge_result:new{}
  local status, res = pcall(self.handler.brk_recharge, self.handler, args.mobile, args.amount)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  else
    result.success = res
  end
  oprot:writeMessageBegin('brk_recharge', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BRKServiceProcessor:process_brk_get_account_balance(seqid, iprot, oprot, server_ctx)
  local args = brk_get_account_balance_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = brk_get_account_balance_result:new{}
  local status, res = pcall(self.handler.brk_get_account_balance, self.handler, args.mobile)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  else
    result.success = res
  end
  oprot:writeMessageBegin('brk_get_account_balance', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BRKServiceProcessor:process_brk_list_account_records(seqid, iprot, oprot, server_ctx)
  local args = brk_list_account_records_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = brk_list_account_records_result:new{}
  local status, res = pcall(self.handler.brk_list_account_records, self.handler, args.mobile)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  else
    result.success = res
  end
  oprot:writeMessageBegin('brk_list_account_records', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BRKServiceProcessor:process_brk_unlock(seqid, iprot, oprot, server_ctx)
  local args = brk_unlock_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = brk_unlock_result:new{}
  local status, res = pcall(self.handler.brk_unlock, self.handler, args.mobile, args.bike_code)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  else
    result.success = res
  end
  oprot:writeMessageBegin('brk_unlock', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BRKServiceProcessor:process_brk_list_travel(seqid, iprot, oprot, server_ctx)
  local args = brk_list_travel_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = brk_list_travel_result:new{}
  local status, res = pcall(self.handler.brk_list_travel, self.handler, args.mobile)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  else
    result.success = res
  end
  oprot:writeMessageBegin('brk_list_travel', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function BRKServiceProcessor:process_brk_lock(seqid, iprot, oprot, server_ctx)
  local args = brk_lock_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = brk_lock_result:new{}
  local status, res = pcall(self.handler.brk_lock, self.handler, args.mobile, args.bike_code)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  else
    result.success = res
  end
  oprot:writeMessageBegin('brk_lock', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

-- HELPER FUNCTIONS AND STRUCTURES

brk_get_mobile_code_args = __TObject:new{
  mobile
}

function brk_get_mobile_code_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.mobile = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function brk_get_mobile_code_args:write(oprot)
  oprot:writeStructBegin('brk_get_mobile_code_args')
  if self.mobile ~= nil then
    oprot:writeFieldBegin('mobile', TType.STRING, 1)
    oprot:writeString(self.mobile)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

brk_get_mobile_code_result = __TObject:new{
  success
}

function brk_get_mobile_code_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = ApiResult:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function brk_get_mobile_code_result:write(oprot)
  oprot:writeStructBegin('brk_get_mobile_code_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

brk_login_args = __TObject:new{
  mobile,
  code
}

function brk_login_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.mobile = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.code = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function brk_login_args:write(oprot)
  oprot:writeStructBegin('brk_login_args')
  if self.mobile ~= nil then
    oprot:writeFieldBegin('mobile', TType.STRING, 1)
    oprot:writeString(self.mobile)
    oprot:writeFieldEnd()
  end
  if self.code ~= nil then
    oprot:writeFieldBegin('code', TType.STRING, 2)
    oprot:writeString(self.code)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

brk_login_result = __TObject:new{
  success
}

function brk_login_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = ApiResult:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function brk_login_result:write(oprot)
  oprot:writeStructBegin('brk_login_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

brk_recharge_args = __TObject:new{
  mobile,
  amount
}

function brk_recharge_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.mobile = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.amount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function brk_recharge_args:write(oprot)
  oprot:writeStructBegin('brk_recharge_args')
  if self.mobile ~= nil then
    oprot:writeFieldBegin('mobile', TType.STRING, 1)
    oprot:writeString(self.mobile)
    oprot:writeFieldEnd()
  end
  if self.amount ~= nil then
    oprot:writeFieldBegin('amount', TType.I32, 2)
    oprot:writeI32(self.amount)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

brk_recharge_result = __TObject:new{
  success
}

function brk_recharge_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = ApiResult:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function brk_recharge_result:write(oprot)
  oprot:writeStructBegin('brk_recharge_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

brk_get_account_balance_args = __TObject:new{
  mobile
}

function brk_get_account_balance_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.mobile = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function brk_get_account_balance_args:write(oprot)
  oprot:writeStructBegin('brk_get_account_balance_args')
  if self.mobile ~= nil then
    oprot:writeFieldBegin('mobile', TType.STRING, 1)
    oprot:writeString(self.mobile)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

brk_get_account_balance_result = __TObject:new{
  success
}

function brk_get_account_balance_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = BalanceResult:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function brk_get_account_balance_result:write(oprot)
  oprot:writeStructBegin('brk_get_account_balance_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

brk_list_account_records_args = __TObject:new{
  mobile
}

function brk_list_account_records_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.mobile = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function brk_list_account_records_args:write(oprot)
  oprot:writeStructBegin('brk_list_account_records_args')
  if self.mobile ~= nil then
    oprot:writeFieldBegin('mobile', TType.STRING, 1)
    oprot:writeString(self.mobile)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

brk_list_account_records_result = __TObject:new{
  success
}

function brk_list_account_records_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = RecordsResult:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function brk_list_account_records_result:write(oprot)
  oprot:writeStructBegin('brk_list_account_records_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

brk_unlock_args = __TObject:new{
  mobile,
  bike_code
}

function brk_unlock_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.mobile = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.bike_code = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function brk_unlock_args:write(oprot)
  oprot:writeStructBegin('brk_unlock_args')
  if self.mobile ~= nil then
    oprot:writeFieldBegin('mobile', TType.STRING, 1)
    oprot:writeString(self.mobile)
    oprot:writeFieldEnd()
  end
  if self.bike_code ~= nil then
    oprot:writeFieldBegin('bike_code', TType.STRING, 2)
    oprot:writeString(self.bike_code)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

brk_unlock_result = __TObject:new{
  success
}

function brk_unlock_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = ApiResult:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function brk_unlock_result:write(oprot)
  oprot:writeStructBegin('brk_unlock_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

brk_list_travel_args = __TObject:new{
  mobile
}

function brk_list_travel_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.mobile = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function brk_list_travel_args:write(oprot)
  oprot:writeStructBegin('brk_list_travel_args')
  if self.mobile ~= nil then
    oprot:writeFieldBegin('mobile', TType.STRING, 1)
    oprot:writeString(self.mobile)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

brk_list_travel_result = __TObject:new{
  success
}

function brk_list_travel_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = TravelResult:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function brk_list_travel_result:write(oprot)
  oprot:writeStructBegin('brk_list_travel_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

brk_lock_args = __TObject:new{
  mobile,
  bike_code
}

function brk_lock_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.mobile = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.bike_code = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function brk_lock_args:write(oprot)
  oprot:writeStructBegin('brk_lock_args')
  if self.mobile ~= nil then
    oprot:writeFieldBegin('mobile', TType.STRING, 1)
    oprot:writeString(self.mobile)
    oprot:writeFieldEnd()
  end
  if self.bike_code ~= nil then
    oprot:writeFieldBegin('bike_code', TType.STRING, 2)
    oprot:writeString(self.bike_code)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

brk_lock_result = __TObject:new{
  success
}

function brk_lock_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = TravelResult:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function brk_lock_result:write(oprot)
  oprot:writeStructBegin('brk_lock_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end
