/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef BRKService_H
#define BRKService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "interface_types.h"

namespace brkservice {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class BRKServiceIf {
 public:
  virtual ~BRKServiceIf() {}

  /**
   * 登录
   * 
   * @param mobile
   */
  virtual void brk_get_mobile_code( ::brkservice::ApiResult& _return, const std::string& mobile) = 0;

  /**
   * 登录
   * 
   * @param mobile
   * @param code
   */
  virtual void brk_login( ::brkservice::ApiResult& _return, const std::string& mobile, const std::string& code) = 0;

  /**
   * 充值
   * 
   * @param mobile
   * @param amount
   */
  virtual void brk_recharge( ::brkservice::ApiResult& _return, const std::string& mobile, const int32_t amount) = 0;

  /**
   * 查询账户余额
   * 
   * @param mobile
   */
  virtual void brk_get_account_balance( ::brkservice::BalanceResult& _return, const std::string& mobile) = 0;

  /**
   * 查询所有消费记录
   * 
   * @param mobile
   */
  virtual void brk_list_account_records( ::brkservice::RecordsResult& _return, const std::string& mobile) = 0;

  /**
   * 解锁
   * 
   * @param mobile
   * @param bike_code
   */
  virtual void brk_unlock( ::brkservice::ApiResult& _return, const std::string& mobile, const std::string& bike_code) = 0;

  /**
   * 查询用户里程
   * 
   * @param mobile
   */
  virtual void brk_list_travel( ::brkservice::TravelResult& _return, const std::string& mobile) = 0;

  /**
   * 结束行程
   * 
   * @param mobile
   * @param bike_code
   */
  virtual void brk_lock( ::brkservice::TravelResult& _return, const std::string& mobile, const std::string& bike_code) = 0;
};

class BRKServiceIfFactory {
 public:
  typedef BRKServiceIf Handler;

  virtual ~BRKServiceIfFactory() {}

  virtual BRKServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(BRKServiceIf* /* handler */) = 0;
};

class BRKServiceIfSingletonFactory : virtual public BRKServiceIfFactory {
 public:
  BRKServiceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<BRKServiceIf>& iface) : iface_(iface) {}
  virtual ~BRKServiceIfSingletonFactory() {}

  virtual BRKServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(BRKServiceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<BRKServiceIf> iface_;
};

class BRKServiceNull : virtual public BRKServiceIf {
 public:
  virtual ~BRKServiceNull() {}
  void brk_get_mobile_code( ::brkservice::ApiResult& /* _return */, const std::string& /* mobile */) {
    return;
  }
  void brk_login( ::brkservice::ApiResult& /* _return */, const std::string& /* mobile */, const std::string& /* code */) {
    return;
  }
  void brk_recharge( ::brkservice::ApiResult& /* _return */, const std::string& /* mobile */, const int32_t /* amount */) {
    return;
  }
  void brk_get_account_balance( ::brkservice::BalanceResult& /* _return */, const std::string& /* mobile */) {
    return;
  }
  void brk_list_account_records( ::brkservice::RecordsResult& /* _return */, const std::string& /* mobile */) {
    return;
  }
  void brk_unlock( ::brkservice::ApiResult& /* _return */, const std::string& /* mobile */, const std::string& /* bike_code */) {
    return;
  }
  void brk_list_travel( ::brkservice::TravelResult& /* _return */, const std::string& /* mobile */) {
    return;
  }
  void brk_lock( ::brkservice::TravelResult& /* _return */, const std::string& /* mobile */, const std::string& /* bike_code */) {
    return;
  }
};

typedef struct _BRKService_brk_get_mobile_code_args__isset {
  _BRKService_brk_get_mobile_code_args__isset() : mobile(false) {}
  bool mobile :1;
} _BRKService_brk_get_mobile_code_args__isset;

class BRKService_brk_get_mobile_code_args {
 public:

  BRKService_brk_get_mobile_code_args(const BRKService_brk_get_mobile_code_args&);
  BRKService_brk_get_mobile_code_args& operator=(const BRKService_brk_get_mobile_code_args&);
  BRKService_brk_get_mobile_code_args() : mobile() {
  }

  virtual ~BRKService_brk_get_mobile_code_args() throw();
  std::string mobile;

  _BRKService_brk_get_mobile_code_args__isset __isset;

  void __set_mobile(const std::string& val);

  bool operator == (const BRKService_brk_get_mobile_code_args & rhs) const
  {
    if (!(mobile == rhs.mobile))
      return false;
    return true;
  }
  bool operator != (const BRKService_brk_get_mobile_code_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BRKService_brk_get_mobile_code_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BRKService_brk_get_mobile_code_pargs {
 public:


  virtual ~BRKService_brk_get_mobile_code_pargs() throw();
  const std::string* mobile;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BRKService_brk_get_mobile_code_result__isset {
  _BRKService_brk_get_mobile_code_result__isset() : success(false) {}
  bool success :1;
} _BRKService_brk_get_mobile_code_result__isset;

class BRKService_brk_get_mobile_code_result {
 public:

  BRKService_brk_get_mobile_code_result(const BRKService_brk_get_mobile_code_result&);
  BRKService_brk_get_mobile_code_result& operator=(const BRKService_brk_get_mobile_code_result&);
  BRKService_brk_get_mobile_code_result() {
  }

  virtual ~BRKService_brk_get_mobile_code_result() throw();
   ::brkservice::ApiResult success;

  _BRKService_brk_get_mobile_code_result__isset __isset;

  void __set_success(const  ::brkservice::ApiResult& val);

  bool operator == (const BRKService_brk_get_mobile_code_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BRKService_brk_get_mobile_code_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BRKService_brk_get_mobile_code_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BRKService_brk_get_mobile_code_presult__isset {
  _BRKService_brk_get_mobile_code_presult__isset() : success(false) {}
  bool success :1;
} _BRKService_brk_get_mobile_code_presult__isset;

class BRKService_brk_get_mobile_code_presult {
 public:


  virtual ~BRKService_brk_get_mobile_code_presult() throw();
   ::brkservice::ApiResult* success;

  _BRKService_brk_get_mobile_code_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BRKService_brk_login_args__isset {
  _BRKService_brk_login_args__isset() : mobile(false), code(false) {}
  bool mobile :1;
  bool code :1;
} _BRKService_brk_login_args__isset;

class BRKService_brk_login_args {
 public:

  BRKService_brk_login_args(const BRKService_brk_login_args&);
  BRKService_brk_login_args& operator=(const BRKService_brk_login_args&);
  BRKService_brk_login_args() : mobile(), code() {
  }

  virtual ~BRKService_brk_login_args() throw();
  std::string mobile;
  std::string code;

  _BRKService_brk_login_args__isset __isset;

  void __set_mobile(const std::string& val);

  void __set_code(const std::string& val);

  bool operator == (const BRKService_brk_login_args & rhs) const
  {
    if (!(mobile == rhs.mobile))
      return false;
    if (!(code == rhs.code))
      return false;
    return true;
  }
  bool operator != (const BRKService_brk_login_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BRKService_brk_login_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BRKService_brk_login_pargs {
 public:


  virtual ~BRKService_brk_login_pargs() throw();
  const std::string* mobile;
  const std::string* code;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BRKService_brk_login_result__isset {
  _BRKService_brk_login_result__isset() : success(false) {}
  bool success :1;
} _BRKService_brk_login_result__isset;

class BRKService_brk_login_result {
 public:

  BRKService_brk_login_result(const BRKService_brk_login_result&);
  BRKService_brk_login_result& operator=(const BRKService_brk_login_result&);
  BRKService_brk_login_result() {
  }

  virtual ~BRKService_brk_login_result() throw();
   ::brkservice::ApiResult success;

  _BRKService_brk_login_result__isset __isset;

  void __set_success(const  ::brkservice::ApiResult& val);

  bool operator == (const BRKService_brk_login_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BRKService_brk_login_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BRKService_brk_login_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BRKService_brk_login_presult__isset {
  _BRKService_brk_login_presult__isset() : success(false) {}
  bool success :1;
} _BRKService_brk_login_presult__isset;

class BRKService_brk_login_presult {
 public:


  virtual ~BRKService_brk_login_presult() throw();
   ::brkservice::ApiResult* success;

  _BRKService_brk_login_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BRKService_brk_recharge_args__isset {
  _BRKService_brk_recharge_args__isset() : mobile(false), amount(false) {}
  bool mobile :1;
  bool amount :1;
} _BRKService_brk_recharge_args__isset;

class BRKService_brk_recharge_args {
 public:

  BRKService_brk_recharge_args(const BRKService_brk_recharge_args&);
  BRKService_brk_recharge_args& operator=(const BRKService_brk_recharge_args&);
  BRKService_brk_recharge_args() : mobile(), amount(0) {
  }

  virtual ~BRKService_brk_recharge_args() throw();
  std::string mobile;
  int32_t amount;

  _BRKService_brk_recharge_args__isset __isset;

  void __set_mobile(const std::string& val);

  void __set_amount(const int32_t val);

  bool operator == (const BRKService_brk_recharge_args & rhs) const
  {
    if (!(mobile == rhs.mobile))
      return false;
    if (!(amount == rhs.amount))
      return false;
    return true;
  }
  bool operator != (const BRKService_brk_recharge_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BRKService_brk_recharge_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BRKService_brk_recharge_pargs {
 public:


  virtual ~BRKService_brk_recharge_pargs() throw();
  const std::string* mobile;
  const int32_t* amount;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BRKService_brk_recharge_result__isset {
  _BRKService_brk_recharge_result__isset() : success(false) {}
  bool success :1;
} _BRKService_brk_recharge_result__isset;

class BRKService_brk_recharge_result {
 public:

  BRKService_brk_recharge_result(const BRKService_brk_recharge_result&);
  BRKService_brk_recharge_result& operator=(const BRKService_brk_recharge_result&);
  BRKService_brk_recharge_result() {
  }

  virtual ~BRKService_brk_recharge_result() throw();
   ::brkservice::ApiResult success;

  _BRKService_brk_recharge_result__isset __isset;

  void __set_success(const  ::brkservice::ApiResult& val);

  bool operator == (const BRKService_brk_recharge_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BRKService_brk_recharge_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BRKService_brk_recharge_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BRKService_brk_recharge_presult__isset {
  _BRKService_brk_recharge_presult__isset() : success(false) {}
  bool success :1;
} _BRKService_brk_recharge_presult__isset;

class BRKService_brk_recharge_presult {
 public:


  virtual ~BRKService_brk_recharge_presult() throw();
   ::brkservice::ApiResult* success;

  _BRKService_brk_recharge_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BRKService_brk_get_account_balance_args__isset {
  _BRKService_brk_get_account_balance_args__isset() : mobile(false) {}
  bool mobile :1;
} _BRKService_brk_get_account_balance_args__isset;

class BRKService_brk_get_account_balance_args {
 public:

  BRKService_brk_get_account_balance_args(const BRKService_brk_get_account_balance_args&);
  BRKService_brk_get_account_balance_args& operator=(const BRKService_brk_get_account_balance_args&);
  BRKService_brk_get_account_balance_args() : mobile() {
  }

  virtual ~BRKService_brk_get_account_balance_args() throw();
  std::string mobile;

  _BRKService_brk_get_account_balance_args__isset __isset;

  void __set_mobile(const std::string& val);

  bool operator == (const BRKService_brk_get_account_balance_args & rhs) const
  {
    if (!(mobile == rhs.mobile))
      return false;
    return true;
  }
  bool operator != (const BRKService_brk_get_account_balance_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BRKService_brk_get_account_balance_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BRKService_brk_get_account_balance_pargs {
 public:


  virtual ~BRKService_brk_get_account_balance_pargs() throw();
  const std::string* mobile;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BRKService_brk_get_account_balance_result__isset {
  _BRKService_brk_get_account_balance_result__isset() : success(false) {}
  bool success :1;
} _BRKService_brk_get_account_balance_result__isset;

class BRKService_brk_get_account_balance_result {
 public:

  BRKService_brk_get_account_balance_result(const BRKService_brk_get_account_balance_result&);
  BRKService_brk_get_account_balance_result& operator=(const BRKService_brk_get_account_balance_result&);
  BRKService_brk_get_account_balance_result() {
  }

  virtual ~BRKService_brk_get_account_balance_result() throw();
   ::brkservice::BalanceResult success;

  _BRKService_brk_get_account_balance_result__isset __isset;

  void __set_success(const  ::brkservice::BalanceResult& val);

  bool operator == (const BRKService_brk_get_account_balance_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BRKService_brk_get_account_balance_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BRKService_brk_get_account_balance_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BRKService_brk_get_account_balance_presult__isset {
  _BRKService_brk_get_account_balance_presult__isset() : success(false) {}
  bool success :1;
} _BRKService_brk_get_account_balance_presult__isset;

class BRKService_brk_get_account_balance_presult {
 public:


  virtual ~BRKService_brk_get_account_balance_presult() throw();
   ::brkservice::BalanceResult* success;

  _BRKService_brk_get_account_balance_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BRKService_brk_list_account_records_args__isset {
  _BRKService_brk_list_account_records_args__isset() : mobile(false) {}
  bool mobile :1;
} _BRKService_brk_list_account_records_args__isset;

class BRKService_brk_list_account_records_args {
 public:

  BRKService_brk_list_account_records_args(const BRKService_brk_list_account_records_args&);
  BRKService_brk_list_account_records_args& operator=(const BRKService_brk_list_account_records_args&);
  BRKService_brk_list_account_records_args() : mobile() {
  }

  virtual ~BRKService_brk_list_account_records_args() throw();
  std::string mobile;

  _BRKService_brk_list_account_records_args__isset __isset;

  void __set_mobile(const std::string& val);

  bool operator == (const BRKService_brk_list_account_records_args & rhs) const
  {
    if (!(mobile == rhs.mobile))
      return false;
    return true;
  }
  bool operator != (const BRKService_brk_list_account_records_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BRKService_brk_list_account_records_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BRKService_brk_list_account_records_pargs {
 public:


  virtual ~BRKService_brk_list_account_records_pargs() throw();
  const std::string* mobile;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BRKService_brk_list_account_records_result__isset {
  _BRKService_brk_list_account_records_result__isset() : success(false) {}
  bool success :1;
} _BRKService_brk_list_account_records_result__isset;

class BRKService_brk_list_account_records_result {
 public:

  BRKService_brk_list_account_records_result(const BRKService_brk_list_account_records_result&);
  BRKService_brk_list_account_records_result& operator=(const BRKService_brk_list_account_records_result&);
  BRKService_brk_list_account_records_result() {
  }

  virtual ~BRKService_brk_list_account_records_result() throw();
   ::brkservice::RecordsResult success;

  _BRKService_brk_list_account_records_result__isset __isset;

  void __set_success(const  ::brkservice::RecordsResult& val);

  bool operator == (const BRKService_brk_list_account_records_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BRKService_brk_list_account_records_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BRKService_brk_list_account_records_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BRKService_brk_list_account_records_presult__isset {
  _BRKService_brk_list_account_records_presult__isset() : success(false) {}
  bool success :1;
} _BRKService_brk_list_account_records_presult__isset;

class BRKService_brk_list_account_records_presult {
 public:


  virtual ~BRKService_brk_list_account_records_presult() throw();
   ::brkservice::RecordsResult* success;

  _BRKService_brk_list_account_records_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BRKService_brk_unlock_args__isset {
  _BRKService_brk_unlock_args__isset() : mobile(false), bike_code(false) {}
  bool mobile :1;
  bool bike_code :1;
} _BRKService_brk_unlock_args__isset;

class BRKService_brk_unlock_args {
 public:

  BRKService_brk_unlock_args(const BRKService_brk_unlock_args&);
  BRKService_brk_unlock_args& operator=(const BRKService_brk_unlock_args&);
  BRKService_brk_unlock_args() : mobile(), bike_code() {
  }

  virtual ~BRKService_brk_unlock_args() throw();
  std::string mobile;
  std::string bike_code;

  _BRKService_brk_unlock_args__isset __isset;

  void __set_mobile(const std::string& val);

  void __set_bike_code(const std::string& val);

  bool operator == (const BRKService_brk_unlock_args & rhs) const
  {
    if (!(mobile == rhs.mobile))
      return false;
    if (!(bike_code == rhs.bike_code))
      return false;
    return true;
  }
  bool operator != (const BRKService_brk_unlock_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BRKService_brk_unlock_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BRKService_brk_unlock_pargs {
 public:


  virtual ~BRKService_brk_unlock_pargs() throw();
  const std::string* mobile;
  const std::string* bike_code;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BRKService_brk_unlock_result__isset {
  _BRKService_brk_unlock_result__isset() : success(false) {}
  bool success :1;
} _BRKService_brk_unlock_result__isset;

class BRKService_brk_unlock_result {
 public:

  BRKService_brk_unlock_result(const BRKService_brk_unlock_result&);
  BRKService_brk_unlock_result& operator=(const BRKService_brk_unlock_result&);
  BRKService_brk_unlock_result() {
  }

  virtual ~BRKService_brk_unlock_result() throw();
   ::brkservice::ApiResult success;

  _BRKService_brk_unlock_result__isset __isset;

  void __set_success(const  ::brkservice::ApiResult& val);

  bool operator == (const BRKService_brk_unlock_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BRKService_brk_unlock_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BRKService_brk_unlock_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BRKService_brk_unlock_presult__isset {
  _BRKService_brk_unlock_presult__isset() : success(false) {}
  bool success :1;
} _BRKService_brk_unlock_presult__isset;

class BRKService_brk_unlock_presult {
 public:


  virtual ~BRKService_brk_unlock_presult() throw();
   ::brkservice::ApiResult* success;

  _BRKService_brk_unlock_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BRKService_brk_list_travel_args__isset {
  _BRKService_brk_list_travel_args__isset() : mobile(false) {}
  bool mobile :1;
} _BRKService_brk_list_travel_args__isset;

class BRKService_brk_list_travel_args {
 public:

  BRKService_brk_list_travel_args(const BRKService_brk_list_travel_args&);
  BRKService_brk_list_travel_args& operator=(const BRKService_brk_list_travel_args&);
  BRKService_brk_list_travel_args() : mobile() {
  }

  virtual ~BRKService_brk_list_travel_args() throw();
  std::string mobile;

  _BRKService_brk_list_travel_args__isset __isset;

  void __set_mobile(const std::string& val);

  bool operator == (const BRKService_brk_list_travel_args & rhs) const
  {
    if (!(mobile == rhs.mobile))
      return false;
    return true;
  }
  bool operator != (const BRKService_brk_list_travel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BRKService_brk_list_travel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BRKService_brk_list_travel_pargs {
 public:


  virtual ~BRKService_brk_list_travel_pargs() throw();
  const std::string* mobile;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BRKService_brk_list_travel_result__isset {
  _BRKService_brk_list_travel_result__isset() : success(false) {}
  bool success :1;
} _BRKService_brk_list_travel_result__isset;

class BRKService_brk_list_travel_result {
 public:

  BRKService_brk_list_travel_result(const BRKService_brk_list_travel_result&);
  BRKService_brk_list_travel_result& operator=(const BRKService_brk_list_travel_result&);
  BRKService_brk_list_travel_result() {
  }

  virtual ~BRKService_brk_list_travel_result() throw();
   ::brkservice::TravelResult success;

  _BRKService_brk_list_travel_result__isset __isset;

  void __set_success(const  ::brkservice::TravelResult& val);

  bool operator == (const BRKService_brk_list_travel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BRKService_brk_list_travel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BRKService_brk_list_travel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BRKService_brk_list_travel_presult__isset {
  _BRKService_brk_list_travel_presult__isset() : success(false) {}
  bool success :1;
} _BRKService_brk_list_travel_presult__isset;

class BRKService_brk_list_travel_presult {
 public:


  virtual ~BRKService_brk_list_travel_presult() throw();
   ::brkservice::TravelResult* success;

  _BRKService_brk_list_travel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BRKService_brk_lock_args__isset {
  _BRKService_brk_lock_args__isset() : mobile(false), bike_code(false) {}
  bool mobile :1;
  bool bike_code :1;
} _BRKService_brk_lock_args__isset;

class BRKService_brk_lock_args {
 public:

  BRKService_brk_lock_args(const BRKService_brk_lock_args&);
  BRKService_brk_lock_args& operator=(const BRKService_brk_lock_args&);
  BRKService_brk_lock_args() : mobile(), bike_code() {
  }

  virtual ~BRKService_brk_lock_args() throw();
  std::string mobile;
  std::string bike_code;

  _BRKService_brk_lock_args__isset __isset;

  void __set_mobile(const std::string& val);

  void __set_bike_code(const std::string& val);

  bool operator == (const BRKService_brk_lock_args & rhs) const
  {
    if (!(mobile == rhs.mobile))
      return false;
    if (!(bike_code == rhs.bike_code))
      return false;
    return true;
  }
  bool operator != (const BRKService_brk_lock_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BRKService_brk_lock_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BRKService_brk_lock_pargs {
 public:


  virtual ~BRKService_brk_lock_pargs() throw();
  const std::string* mobile;
  const std::string* bike_code;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BRKService_brk_lock_result__isset {
  _BRKService_brk_lock_result__isset() : success(false) {}
  bool success :1;
} _BRKService_brk_lock_result__isset;

class BRKService_brk_lock_result {
 public:

  BRKService_brk_lock_result(const BRKService_brk_lock_result&);
  BRKService_brk_lock_result& operator=(const BRKService_brk_lock_result&);
  BRKService_brk_lock_result() {
  }

  virtual ~BRKService_brk_lock_result() throw();
   ::brkservice::TravelResult success;

  _BRKService_brk_lock_result__isset __isset;

  void __set_success(const  ::brkservice::TravelResult& val);

  bool operator == (const BRKService_brk_lock_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BRKService_brk_lock_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BRKService_brk_lock_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BRKService_brk_lock_presult__isset {
  _BRKService_brk_lock_presult__isset() : success(false) {}
  bool success :1;
} _BRKService_brk_lock_presult__isset;

class BRKService_brk_lock_presult {
 public:


  virtual ~BRKService_brk_lock_presult() throw();
   ::brkservice::TravelResult* success;

  _BRKService_brk_lock_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class BRKServiceClient : virtual public BRKServiceIf {
 public:
  BRKServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  BRKServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void brk_get_mobile_code( ::brkservice::ApiResult& _return, const std::string& mobile);
  void send_brk_get_mobile_code(const std::string& mobile);
  void recv_brk_get_mobile_code( ::brkservice::ApiResult& _return);
  void brk_login( ::brkservice::ApiResult& _return, const std::string& mobile, const std::string& code);
  void send_brk_login(const std::string& mobile, const std::string& code);
  void recv_brk_login( ::brkservice::ApiResult& _return);
  void brk_recharge( ::brkservice::ApiResult& _return, const std::string& mobile, const int32_t amount);
  void send_brk_recharge(const std::string& mobile, const int32_t amount);
  void recv_brk_recharge( ::brkservice::ApiResult& _return);
  void brk_get_account_balance( ::brkservice::BalanceResult& _return, const std::string& mobile);
  void send_brk_get_account_balance(const std::string& mobile);
  void recv_brk_get_account_balance( ::brkservice::BalanceResult& _return);
  void brk_list_account_records( ::brkservice::RecordsResult& _return, const std::string& mobile);
  void send_brk_list_account_records(const std::string& mobile);
  void recv_brk_list_account_records( ::brkservice::RecordsResult& _return);
  void brk_unlock( ::brkservice::ApiResult& _return, const std::string& mobile, const std::string& bike_code);
  void send_brk_unlock(const std::string& mobile, const std::string& bike_code);
  void recv_brk_unlock( ::brkservice::ApiResult& _return);
  void brk_list_travel( ::brkservice::TravelResult& _return, const std::string& mobile);
  void send_brk_list_travel(const std::string& mobile);
  void recv_brk_list_travel( ::brkservice::TravelResult& _return);
  void brk_lock( ::brkservice::TravelResult& _return, const std::string& mobile, const std::string& bike_code);
  void send_brk_lock(const std::string& mobile, const std::string& bike_code);
  void recv_brk_lock( ::brkservice::TravelResult& _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class BRKServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<BRKServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (BRKServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_brk_get_mobile_code(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_brk_login(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_brk_recharge(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_brk_get_account_balance(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_brk_list_account_records(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_brk_unlock(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_brk_list_travel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_brk_lock(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  BRKServiceProcessor(::apache::thrift::stdcxx::shared_ptr<BRKServiceIf> iface) :
    iface_(iface) {
    processMap_["brk_get_mobile_code"] = &BRKServiceProcessor::process_brk_get_mobile_code;
    processMap_["brk_login"] = &BRKServiceProcessor::process_brk_login;
    processMap_["brk_recharge"] = &BRKServiceProcessor::process_brk_recharge;
    processMap_["brk_get_account_balance"] = &BRKServiceProcessor::process_brk_get_account_balance;
    processMap_["brk_list_account_records"] = &BRKServiceProcessor::process_brk_list_account_records;
    processMap_["brk_unlock"] = &BRKServiceProcessor::process_brk_unlock;
    processMap_["brk_list_travel"] = &BRKServiceProcessor::process_brk_list_travel;
    processMap_["brk_lock"] = &BRKServiceProcessor::process_brk_lock;
  }

  virtual ~BRKServiceProcessor() {}
};

class BRKServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  BRKServiceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< BRKServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< BRKServiceIfFactory > handlerFactory_;
};

class BRKServiceMultiface : virtual public BRKServiceIf {
 public:
  BRKServiceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<BRKServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~BRKServiceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<BRKServiceIf> > ifaces_;
  BRKServiceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<BRKServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void brk_get_mobile_code( ::brkservice::ApiResult& _return, const std::string& mobile) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->brk_get_mobile_code(_return, mobile);
    }
    ifaces_[i]->brk_get_mobile_code(_return, mobile);
    return;
  }

  void brk_login( ::brkservice::ApiResult& _return, const std::string& mobile, const std::string& code) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->brk_login(_return, mobile, code);
    }
    ifaces_[i]->brk_login(_return, mobile, code);
    return;
  }

  void brk_recharge( ::brkservice::ApiResult& _return, const std::string& mobile, const int32_t amount) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->brk_recharge(_return, mobile, amount);
    }
    ifaces_[i]->brk_recharge(_return, mobile, amount);
    return;
  }

  void brk_get_account_balance( ::brkservice::BalanceResult& _return, const std::string& mobile) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->brk_get_account_balance(_return, mobile);
    }
    ifaces_[i]->brk_get_account_balance(_return, mobile);
    return;
  }

  void brk_list_account_records( ::brkservice::RecordsResult& _return, const std::string& mobile) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->brk_list_account_records(_return, mobile);
    }
    ifaces_[i]->brk_list_account_records(_return, mobile);
    return;
  }

  void brk_unlock( ::brkservice::ApiResult& _return, const std::string& mobile, const std::string& bike_code) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->brk_unlock(_return, mobile, bike_code);
    }
    ifaces_[i]->brk_unlock(_return, mobile, bike_code);
    return;
  }

  void brk_list_travel( ::brkservice::TravelResult& _return, const std::string& mobile) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->brk_list_travel(_return, mobile);
    }
    ifaces_[i]->brk_list_travel(_return, mobile);
    return;
  }

  void brk_lock( ::brkservice::TravelResult& _return, const std::string& mobile, const std::string& bike_code) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->brk_lock(_return, mobile, bike_code);
    }
    ifaces_[i]->brk_lock(_return, mobile, bike_code);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class BRKServiceConcurrentClient : virtual public BRKServiceIf {
 public:
  BRKServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  BRKServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void brk_get_mobile_code( ::brkservice::ApiResult& _return, const std::string& mobile);
  int32_t send_brk_get_mobile_code(const std::string& mobile);
  void recv_brk_get_mobile_code( ::brkservice::ApiResult& _return, const int32_t seqid);
  void brk_login( ::brkservice::ApiResult& _return, const std::string& mobile, const std::string& code);
  int32_t send_brk_login(const std::string& mobile, const std::string& code);
  void recv_brk_login( ::brkservice::ApiResult& _return, const int32_t seqid);
  void brk_recharge( ::brkservice::ApiResult& _return, const std::string& mobile, const int32_t amount);
  int32_t send_brk_recharge(const std::string& mobile, const int32_t amount);
  void recv_brk_recharge( ::brkservice::ApiResult& _return, const int32_t seqid);
  void brk_get_account_balance( ::brkservice::BalanceResult& _return, const std::string& mobile);
  int32_t send_brk_get_account_balance(const std::string& mobile);
  void recv_brk_get_account_balance( ::brkservice::BalanceResult& _return, const int32_t seqid);
  void brk_list_account_records( ::brkservice::RecordsResult& _return, const std::string& mobile);
  int32_t send_brk_list_account_records(const std::string& mobile);
  void recv_brk_list_account_records( ::brkservice::RecordsResult& _return, const int32_t seqid);
  void brk_unlock( ::brkservice::ApiResult& _return, const std::string& mobile, const std::string& bike_code);
  int32_t send_brk_unlock(const std::string& mobile, const std::string& bike_code);
  void recv_brk_unlock( ::brkservice::ApiResult& _return, const int32_t seqid);
  void brk_list_travel( ::brkservice::TravelResult& _return, const std::string& mobile);
  int32_t send_brk_list_travel(const std::string& mobile);
  void recv_brk_list_travel( ::brkservice::TravelResult& _return, const int32_t seqid);
  void brk_lock( ::brkservice::TravelResult& _return, const std::string& mobile, const std::string& bike_code);
  int32_t send_brk_lock(const std::string& mobile, const std::string& bike_code);
  void recv_brk_lock( ::brkservice::TravelResult& _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
