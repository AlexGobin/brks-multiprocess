/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "struct_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace brkservice {


ApiResult::~ApiResult() throw() {
}


void ApiResult::__set_resultCode(const int32_t val) {
  this->resultCode = val;
}

void ApiResult::__set_resultMsg(const std::string& val) {
  this->resultMsg = val;
}

void ApiResult::__set_data(const std::string& val) {
  this->data = val;
__isset.data = true;
}
std::ostream& operator<<(std::ostream& out, const ApiResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ApiResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_resultCode = false;
  bool isset_resultMsg = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->resultCode);
          isset_resultCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->resultMsg);
          isset_resultMsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->data);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_resultCode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_resultMsg)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ApiResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ApiResult");

  xfer += oprot->writeFieldBegin("resultCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->resultCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("resultMsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->resultMsg);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.data) {
    xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->data);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ApiResult &a, ApiResult &b) {
  using ::std::swap;
  swap(a.resultCode, b.resultCode);
  swap(a.resultMsg, b.resultMsg);
  swap(a.data, b.data);
  swap(a.__isset, b.__isset);
}

ApiResult::ApiResult(const ApiResult& other0) {
  resultCode = other0.resultCode;
  resultMsg = other0.resultMsg;
  data = other0.data;
  __isset = other0.__isset;
}
ApiResult& ApiResult::operator=(const ApiResult& other1) {
  resultCode = other1.resultCode;
  resultMsg = other1.resultMsg;
  data = other1.data;
  __isset = other1.__isset;
  return *this;
}
void ApiResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ApiResult(";
  out << "resultCode=" << to_string(resultCode);
  out << ", " << "resultMsg=" << to_string(resultMsg);
  out << ", " << "data="; (__isset.data ? (out << to_string(data)) : (out << "<null>"));
  out << ")";
}


BalanceResult::~BalanceResult() throw() {
}


void BalanceResult::__set_resultCode(const int32_t val) {
  this->resultCode = val;
}

void BalanceResult::__set_resultMsg(const std::string& val) {
  this->resultMsg = val;
}

void BalanceResult::__set_balance(const int32_t val) {
  this->balance = val;
}
std::ostream& operator<<(std::ostream& out, const BalanceResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t BalanceResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_resultCode = false;
  bool isset_resultMsg = false;
  bool isset_balance = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->resultCode);
          isset_resultCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->resultMsg);
          isset_resultMsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->balance);
          isset_balance = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_resultCode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_resultMsg)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_balance)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t BalanceResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BalanceResult");

  xfer += oprot->writeFieldBegin("resultCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->resultCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("resultMsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->resultMsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("balance", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->balance);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BalanceResult &a, BalanceResult &b) {
  using ::std::swap;
  swap(a.resultCode, b.resultCode);
  swap(a.resultMsg, b.resultMsg);
  swap(a.balance, b.balance);
}

BalanceResult::BalanceResult(const BalanceResult& other2) {
  resultCode = other2.resultCode;
  resultMsg = other2.resultMsg;
  balance = other2.balance;
}
BalanceResult& BalanceResult::operator=(const BalanceResult& other3) {
  resultCode = other3.resultCode;
  resultMsg = other3.resultMsg;
  balance = other3.balance;
  return *this;
}
void BalanceResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BalanceResult(";
  out << "resultCode=" << to_string(resultCode);
  out << ", " << "resultMsg=" << to_string(resultMsg);
  out << ", " << "balance=" << to_string(balance);
  out << ")";
}


AccountRecords::~AccountRecords() throw() {
}


void AccountRecords::__set_type(const int16_t val) {
  this->type = val;
}

void AccountRecords::__set_limit(const double val) {
  this->limit = val;
}

void AccountRecords::__set_timestamp(const int64_t val) {
  this->timestamp = val;
}
std::ostream& operator<<(std::ostream& out, const AccountRecords& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t AccountRecords::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type = false;
  bool isset_limit = false;
  bool isset_timestamp = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->type);
          isset_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->limit);
          isset_limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timestamp);
          isset_timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_limit)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_timestamp)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AccountRecords::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AccountRecords");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("limit", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->limit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AccountRecords &a, AccountRecords &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.limit, b.limit);
  swap(a.timestamp, b.timestamp);
}

AccountRecords::AccountRecords(const AccountRecords& other4) {
  type = other4.type;
  limit = other4.limit;
  timestamp = other4.timestamp;
}
AccountRecords& AccountRecords::operator=(const AccountRecords& other5) {
  type = other5.type;
  limit = other5.limit;
  timestamp = other5.timestamp;
  return *this;
}
void AccountRecords::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AccountRecords(";
  out << "type=" << to_string(type);
  out << ", " << "limit=" << to_string(limit);
  out << ", " << "timestamp=" << to_string(timestamp);
  out << ")";
}


RecordsResult::~RecordsResult() throw() {
}


void RecordsResult::__set_resultCode(const int32_t val) {
  this->resultCode = val;
}

void RecordsResult::__set_resultMsg(const std::string& val) {
  this->resultMsg = val;
}

void RecordsResult::__set_records(const std::vector<AccountRecords> & val) {
  this->records = val;
}
std::ostream& operator<<(std::ostream& out, const RecordsResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RecordsResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_resultCode = false;
  bool isset_resultMsg = false;
  bool isset_records = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->resultCode);
          isset_resultCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->resultMsg);
          isset_resultMsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->records.clear();
            uint32_t _size6;
            ::apache::thrift::protocol::TType _etype9;
            xfer += iprot->readListBegin(_etype9, _size6);
            this->records.resize(_size6);
            uint32_t _i10;
            for (_i10 = 0; _i10 < _size6; ++_i10)
            {
              xfer += this->records[_i10].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_records = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_resultCode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_resultMsg)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_records)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RecordsResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RecordsResult");

  xfer += oprot->writeFieldBegin("resultCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->resultCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("resultMsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->resultMsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("records", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->records.size()));
    std::vector<AccountRecords> ::const_iterator _iter11;
    for (_iter11 = this->records.begin(); _iter11 != this->records.end(); ++_iter11)
    {
      xfer += (*_iter11).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RecordsResult &a, RecordsResult &b) {
  using ::std::swap;
  swap(a.resultCode, b.resultCode);
  swap(a.resultMsg, b.resultMsg);
  swap(a.records, b.records);
}

RecordsResult::RecordsResult(const RecordsResult& other12) {
  resultCode = other12.resultCode;
  resultMsg = other12.resultMsg;
  records = other12.records;
}
RecordsResult& RecordsResult::operator=(const RecordsResult& other13) {
  resultCode = other13.resultCode;
  resultMsg = other13.resultMsg;
  records = other13.records;
  return *this;
}
void RecordsResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RecordsResult(";
  out << "resultCode=" << to_string(resultCode);
  out << ", " << "resultMsg=" << to_string(resultMsg);
  out << ", " << "records=" << to_string(records);
  out << ")";
}


TravelRecord::~TravelRecord() throw() {
}


void TravelRecord::__set_startTimeStamp(const int64_t val) {
  this->startTimeStamp = val;
}

void TravelRecord::__set_duration(const int32_t val) {
  this->duration = val;
}

void TravelRecord::__set_amount(const int32_t val) {
  this->amount = val;
}
std::ostream& operator<<(std::ostream& out, const TravelRecord& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TravelRecord::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_startTimeStamp = false;
  bool isset_duration = false;
  bool isset_amount = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->startTimeStamp);
          isset_startTimeStamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->duration);
          isset_duration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->amount);
          isset_amount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_startTimeStamp)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_duration)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_amount)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TravelRecord::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TravelRecord");

  xfer += oprot->writeFieldBegin("startTimeStamp", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->startTimeStamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("duration", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->duration);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("amount", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->amount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TravelRecord &a, TravelRecord &b) {
  using ::std::swap;
  swap(a.startTimeStamp, b.startTimeStamp);
  swap(a.duration, b.duration);
  swap(a.amount, b.amount);
}

TravelRecord::TravelRecord(const TravelRecord& other14) {
  startTimeStamp = other14.startTimeStamp;
  duration = other14.duration;
  amount = other14.amount;
}
TravelRecord& TravelRecord::operator=(const TravelRecord& other15) {
  startTimeStamp = other15.startTimeStamp;
  duration = other15.duration;
  amount = other15.amount;
  return *this;
}
void TravelRecord::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TravelRecord(";
  out << "startTimeStamp=" << to_string(startTimeStamp);
  out << ", " << "duration=" << to_string(duration);
  out << ", " << "amount=" << to_string(amount);
  out << ")";
}


TravelResult::~TravelResult() throw() {
}


void TravelResult::__set_resultCode(const int32_t val) {
  this->resultCode = val;
}

void TravelResult::__set_resultMsg(const std::string& val) {
  this->resultMsg = val;
}

void TravelResult::__set_data(const std::string& val) {
  this->data = val;
__isset.data = true;
}

void TravelResult::__set_mileage(const double val) {
  this->mileage = val;
}

void TravelResult::__set_discharge(const double val) {
  this->discharge = val;
}

void TravelResult::__set_calorie(const double val) {
  this->calorie = val;
}

void TravelResult::__set_records(const std::vector<TravelRecord> & val) {
  this->records = val;
}
std::ostream& operator<<(std::ostream& out, const TravelResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TravelResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_resultCode = false;
  bool isset_resultMsg = false;
  bool isset_mileage = false;
  bool isset_discharge = false;
  bool isset_calorie = false;
  bool isset_records = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->resultCode);
          isset_resultCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->resultMsg);
          isset_resultMsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->data);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->mileage);
          isset_mileage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->discharge);
          isset_discharge = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->calorie);
          isset_calorie = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->records.clear();
            uint32_t _size16;
            ::apache::thrift::protocol::TType _etype19;
            xfer += iprot->readListBegin(_etype19, _size16);
            this->records.resize(_size16);
            uint32_t _i20;
            for (_i20 = 0; _i20 < _size16; ++_i20)
            {
              xfer += this->records[_i20].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_records = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_resultCode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_resultMsg)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_mileage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_discharge)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_calorie)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_records)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TravelResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TravelResult");

  xfer += oprot->writeFieldBegin("resultCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->resultCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("resultMsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->resultMsg);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.data) {
    xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->data);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("mileage", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->mileage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("discharge", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->discharge);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("calorie", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->calorie);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("records", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->records.size()));
    std::vector<TravelRecord> ::const_iterator _iter21;
    for (_iter21 = this->records.begin(); _iter21 != this->records.end(); ++_iter21)
    {
      xfer += (*_iter21).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TravelResult &a, TravelResult &b) {
  using ::std::swap;
  swap(a.resultCode, b.resultCode);
  swap(a.resultMsg, b.resultMsg);
  swap(a.data, b.data);
  swap(a.mileage, b.mileage);
  swap(a.discharge, b.discharge);
  swap(a.calorie, b.calorie);
  swap(a.records, b.records);
  swap(a.__isset, b.__isset);
}

TravelResult::TravelResult(const TravelResult& other22) {
  resultCode = other22.resultCode;
  resultMsg = other22.resultMsg;
  data = other22.data;
  mileage = other22.mileage;
  discharge = other22.discharge;
  calorie = other22.calorie;
  records = other22.records;
  __isset = other22.__isset;
}
TravelResult& TravelResult::operator=(const TravelResult& other23) {
  resultCode = other23.resultCode;
  resultMsg = other23.resultMsg;
  data = other23.data;
  mileage = other23.mileage;
  discharge = other23.discharge;
  calorie = other23.calorie;
  records = other23.records;
  __isset = other23.__isset;
  return *this;
}
void TravelResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TravelResult(";
  out << "resultCode=" << to_string(resultCode);
  out << ", " << "resultMsg=" << to_string(resultMsg);
  out << ", " << "data="; (__isset.data ? (out << to_string(data)) : (out << "<null>"));
  out << ", " << "mileage=" << to_string(mileage);
  out << ", " << "discharge=" << to_string(discharge);
  out << ", " << "calorie=" << to_string(calorie);
  out << ", " << "records=" << to_string(records);
  out << ")";
}

} // namespace
