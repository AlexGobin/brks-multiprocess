/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef struct_TYPES_H
#define struct_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace brkservice {

class ApiResult;

class BalanceResult;

class AccountRecords;

class RecordsResult;

class TravelRecord;

class TravelResult;

typedef struct _ApiResult__isset {
  _ApiResult__isset() : data(false) {}
  bool data :1;
} _ApiResult__isset;

class ApiResult : public virtual ::apache::thrift::TBase {
 public:

  ApiResult(const ApiResult&);
  ApiResult& operator=(const ApiResult&);
  ApiResult() : resultCode(0), resultMsg(), data() {
  }

  virtual ~ApiResult() throw();
  int32_t resultCode;
  std::string resultMsg;
  std::string data;

  _ApiResult__isset __isset;

  void __set_resultCode(const int32_t val);

  void __set_resultMsg(const std::string& val);

  void __set_data(const std::string& val);

  bool operator == (const ApiResult & rhs) const
  {
    if (!(resultCode == rhs.resultCode))
      return false;
    if (!(resultMsg == rhs.resultMsg))
      return false;
    if (__isset.data != rhs.__isset.data)
      return false;
    else if (__isset.data && !(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const ApiResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ApiResult &a, ApiResult &b);

std::ostream& operator<<(std::ostream& out, const ApiResult& obj);


class BalanceResult : public virtual ::apache::thrift::TBase {
 public:

  BalanceResult(const BalanceResult&);
  BalanceResult& operator=(const BalanceResult&);
  BalanceResult() : resultCode(0), resultMsg(), balance(0) {
  }

  virtual ~BalanceResult() throw();
  int32_t resultCode;
  std::string resultMsg;
  int32_t balance;

  void __set_resultCode(const int32_t val);

  void __set_resultMsg(const std::string& val);

  void __set_balance(const int32_t val);

  bool operator == (const BalanceResult & rhs) const
  {
    if (!(resultCode == rhs.resultCode))
      return false;
    if (!(resultMsg == rhs.resultMsg))
      return false;
    if (!(balance == rhs.balance))
      return false;
    return true;
  }
  bool operator != (const BalanceResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BalanceResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BalanceResult &a, BalanceResult &b);

std::ostream& operator<<(std::ostream& out, const BalanceResult& obj);


class AccountRecords : public virtual ::apache::thrift::TBase {
 public:

  AccountRecords(const AccountRecords&);
  AccountRecords& operator=(const AccountRecords&);
  AccountRecords() : type(0), limit(0), timestamp(0) {
  }

  virtual ~AccountRecords() throw();
  int16_t type;
  double limit;
  int64_t timestamp;

  void __set_type(const int16_t val);

  void __set_limit(const double val);

  void __set_timestamp(const int64_t val);

  bool operator == (const AccountRecords & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(limit == rhs.limit))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    return true;
  }
  bool operator != (const AccountRecords &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccountRecords & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AccountRecords &a, AccountRecords &b);

std::ostream& operator<<(std::ostream& out, const AccountRecords& obj);


class RecordsResult : public virtual ::apache::thrift::TBase {
 public:

  RecordsResult(const RecordsResult&);
  RecordsResult& operator=(const RecordsResult&);
  RecordsResult() : resultCode(0), resultMsg() {
  }

  virtual ~RecordsResult() throw();
  int32_t resultCode;
  std::string resultMsg;
  std::vector<AccountRecords>  records;

  void __set_resultCode(const int32_t val);

  void __set_resultMsg(const std::string& val);

  void __set_records(const std::vector<AccountRecords> & val);

  bool operator == (const RecordsResult & rhs) const
  {
    if (!(resultCode == rhs.resultCode))
      return false;
    if (!(resultMsg == rhs.resultMsg))
      return false;
    if (!(records == rhs.records))
      return false;
    return true;
  }
  bool operator != (const RecordsResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecordsResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RecordsResult &a, RecordsResult &b);

std::ostream& operator<<(std::ostream& out, const RecordsResult& obj);


class TravelRecord : public virtual ::apache::thrift::TBase {
 public:

  TravelRecord(const TravelRecord&);
  TravelRecord& operator=(const TravelRecord&);
  TravelRecord() : startTimeStamp(0), duration(0), amount(0) {
  }

  virtual ~TravelRecord() throw();
  int64_t startTimeStamp;
  int32_t duration;
  int32_t amount;

  void __set_startTimeStamp(const int64_t val);

  void __set_duration(const int32_t val);

  void __set_amount(const int32_t val);

  bool operator == (const TravelRecord & rhs) const
  {
    if (!(startTimeStamp == rhs.startTimeStamp))
      return false;
    if (!(duration == rhs.duration))
      return false;
    if (!(amount == rhs.amount))
      return false;
    return true;
  }
  bool operator != (const TravelRecord &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TravelRecord & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TravelRecord &a, TravelRecord &b);

std::ostream& operator<<(std::ostream& out, const TravelRecord& obj);

typedef struct _TravelResult__isset {
  _TravelResult__isset() : data(false) {}
  bool data :1;
} _TravelResult__isset;

class TravelResult : public virtual ::apache::thrift::TBase {
 public:

  TravelResult(const TravelResult&);
  TravelResult& operator=(const TravelResult&);
  TravelResult() : resultCode(0), resultMsg(), data(), mileage(0), discharge(0), calorie(0) {
  }

  virtual ~TravelResult() throw();
  int32_t resultCode;
  std::string resultMsg;
  std::string data;
  double mileage;
  double discharge;
  double calorie;
  std::vector<TravelRecord>  records;

  _TravelResult__isset __isset;

  void __set_resultCode(const int32_t val);

  void __set_resultMsg(const std::string& val);

  void __set_data(const std::string& val);

  void __set_mileage(const double val);

  void __set_discharge(const double val);

  void __set_calorie(const double val);

  void __set_records(const std::vector<TravelRecord> & val);

  bool operator == (const TravelResult & rhs) const
  {
    if (!(resultCode == rhs.resultCode))
      return false;
    if (!(resultMsg == rhs.resultMsg))
      return false;
    if (__isset.data != rhs.__isset.data)
      return false;
    else if (__isset.data && !(data == rhs.data))
      return false;
    if (!(mileage == rhs.mileage))
      return false;
    if (!(discharge == rhs.discharge))
      return false;
    if (!(calorie == rhs.calorie))
      return false;
    if (!(records == rhs.records))
      return false;
    return true;
  }
  bool operator != (const TravelResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TravelResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TravelResult &a, TravelResult &b);

std::ostream& operator<<(std::ostream& out, const TravelResult& obj);

} // namespace

#endif
